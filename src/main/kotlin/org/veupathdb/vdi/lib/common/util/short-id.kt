package org.veupathdb.vdi.lib.common.util

import java.nio.ByteBuffer
import java.util.Base64
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock
import kotlin.random.Random

object ShortID {
  private val random = Random(System.nanoTime())

  /**
   * Generates a 14 digit time-based "mini" identifier encoded in base-64.
   *
   * This identifier is constructed of 3 parts:
   *
   * 1. 40 bits of random data.  This is to prevent conflicts between IDs
   *    generated by different service stacks on the same millisecond.
   * 2. 40 bits of timestamp milliseconds.  This is to prevent ID conflicts over
   *    time for up to 35 years.
   *
   * ```
   * 79       39          0
   * |--------|-----------|
   * | Random | Timestamp |
   * |--------|-----------|
   * ```
   *
   * @return A new random identifier string.
   */
  @JvmStatic
  fun generate(): String {
    val time = System.currentTimeMillis()
    val raw = ByteArray(10)
    val buf = ByteBuffer.wrap(raw)

    buf.appendBytes(random.nextLong().toULong() shl 40, 5)
    buf.appendBytes(time.toULong() shl 24, 5)

    return Base64.getUrlEncoder()
      .encodeToString(raw)
      .trimEnd('=')
  }

  private fun ByteBuffer.appendBytes(v: ULong, count: Int) {
    if (count > 8)
      throw IllegalArgumentException()

    var mask = 0xFF00000000000000uL

    for (i in 1 .. count) {
      val shift = (8 - i) * 8
      put((((v and mask) shr shift) and 0xFFuL).toUByte().toByte())
      mask = mask shr 8
    }
  }
}